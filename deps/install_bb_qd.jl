# This is copied from the `build.jl` file from QD_Builder
# https://github.com/ericphanson/QD_Builder/releases/download/v2.3.22
function install_bb_qd(prefix, verbose)
    products = Product[
        LibraryProduct(prefix, ["libqd"], :libqd),
    ]
    
    # Download binaries from hosted location
    bin_prefix = "https://github.com/ericphanson/QD_Builder/releases/download/v2.3.22"
    
    # Listing of files generated by BinaryBuilder:
    download_info = Dict(
        Linux(:aarch64, libc=:glibc) => ("$bin_prefix/QD.v2.3.22.aarch64-linux-gnu.tar.gz", "6d9bddda83e81dfcdbab058cfa66ca3c632b142d17296780f0e8d8fa90e49ea4"),
        Linux(:aarch64, libc=:musl) => ("$bin_prefix/QD.v2.3.22.aarch64-linux-musl.tar.gz", "7b0fe880d3cfcac5ac68c3c50f95d6e1a9b43dfdb3d5ab4b9618ae40455279a5"),
        Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/QD.v2.3.22.arm-linux-gnueabihf.tar.gz", "12a4ffd77457b044f6a8c60dd1d012e83893362a92da49b0a1f6bc861ef6a493"),
        Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/QD.v2.3.22.arm-linux-musleabihf.tar.gz", "0f30c06dea57dd3512682b6e3d0f6ae9795b6b4f1f52370836d224b8f3e3c4b1"),
        Linux(:i686, libc=:glibc) => ("$bin_prefix/QD.v2.3.22.i686-linux-gnu.tar.gz", "6e18c5c84356291102928c6e270fa2b14e3a8de60ea473b382ee799efbabe82f"),
        Linux(:i686, libc=:musl) => ("$bin_prefix/QD.v2.3.22.i686-linux-musl.tar.gz", "1290218fdce9afa5e75428b7af6fa56a65b3a23b08e2e9f85925bc44bd307ce2"),
        MacOS(:x86_64) => ("$bin_prefix/QD.v2.3.22.x86_64-apple-darwin14.tar.gz", "513ab1c220e30c0e9e82e2049c1e66aa128432072c244ffd1011c4bc7259f3ad"),
        Linux(:x86_64, libc=:glibc) => ("$bin_prefix/QD.v2.3.22.x86_64-linux-gnu.tar.gz", "f4947898a63a43e899ff10e96fa97a47fb9197c33a856615ae4af9a84a4c0726"),
        Linux(:x86_64, libc=:musl) => ("$bin_prefix/QD.v2.3.22.x86_64-linux-musl.tar.gz", "d85586dfa07eaf0186ad5e4e94299a8dcbce83856b37c6f221b710fd3f4e0e8a"),
    )
    
    # Install unsatisfied or updated dependencies:
    unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
    dl_info = choose_download(download_info, platform_key_abi())
    if dl_info === nothing && unsatisfied
        # If we don't have a compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something even more ambitious here.
        error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
    end
    
    # If we have a download, and we are unsatisfied (or the version we're
    # trying to install is not itself installed) then load it up!
    if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
        # Download and install binaries
        install(dl_info...; prefix=prefix, force=true, verbose=verbose)
    end
    return products
end
